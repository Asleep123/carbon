"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[443],{5724:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=t(5723),o=t(5298);const r={title:"Creating the Main File",sidebar_position:1},s=void 0,c={id:"creating-your-bot/the-main-file",title:"Creating the Main File",description:"When you're running your bot, all of your code is going to start from a single file. This file is going to be the main file of your bot, and it's going to be the file that you run when you want to start your bot.",source:"@site/docs/creating-your-bot/the-main-file.mdx",sourceDirName:"creating-your-bot",slug:"/creating-your-bot/the-main-file",permalink:"/docs/creating-your-bot/the-main-file",draft:!1,unlisted:!1,editUrl:"https://github.com/buape/carbon/tree/main/apps/website/docs/docs/creating-your-bot/the-main-file.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Creating the Main File",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"File Structure",permalink:"/docs/setup/file-structure"},next:{title:"Commands",permalink:"/docs/creating-your-bot/components"}},a={},l=[{value:"Importing dotenv",id:"importing-dotenv",level:2},{value:"Importing Carbon",id:"importing-carbon",level:2},{value:"Creating the Client",id:"creating-the-client",level:2},{value:"Serving the Client",id:"serving-the-client",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"When you're running your bot, all of your code is going to start from a single file. This file is going to be the main file of your bot, and it's going to be the file that you run when you want to start your bot."}),"\n",(0,i.jsxs)(n.p,{children:["Open the ",(0,i.jsx)(n.code,{children:"index.js"})," file you created and add the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'import "dotenv/config"\r\nimport { Client } from "@buape/carbon"\r\nimport { loadCommands, serve } from "@buape/carbon-nodejs"\r\n\r\nconst client = new Client(\r\n\t{\r\n\t\tclientId: process.env.CLIENT_ID,\r\n\t\tpublicKey: process.env.PUBLIC_KEY,\r\n\t\ttoken: process.env.DISCORD_TOKEN\r\n\t},\r\n\tawait loadCommands("commands", __dirname)\r\n)\r\n\r\nserve(client, { port: 3000 })\n'})}),"\n",(0,i.jsx)(n.p,{children:"Let's go through this step by step to see how it works."}),"\n",(0,i.jsx)(n.h2,{id:"importing-dotenv",children:"Importing dotenv"}),"\n",(0,i.jsx)(n.p,{children:"The first thing we need to do is import dotenv. We can do this by using the following code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'import "dotenv/config"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This imports dotenv and configures it to use the ",(0,i.jsx)(n.code,{children:".env"})," file in the root of your project. This file is used to store sensitive information such as your bot token."]}),"\n",(0,i.jsx)(n.h2,{id:"importing-carbon",children:"Importing Carbon"}),"\n",(0,i.jsx)(n.p,{children:"After that, we will need to import the Client. We can do this by using the following code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'import { Client } from "carbon"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-the-client",children:"Creating the Client"}),"\n",(0,i.jsx)(n.p,{children:"Next, we need to create the client. We can do this with the next bit of code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const client = new Client(\r\n\t{\r\n\t\tclientId: process.env.CLIENT_ID!,\r\n\t\tpublicKey: process.env.PUBLIC_KEY!,\r\n\t\ttoken: process.env.DISCORD_TOKEN!\r\n\t},\r\n\tawait loadCommands("commands", __dirname)\r\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This code creates a new client with the options we need to connect to Discord. We are passing in the ",(0,i.jsx)(n.code,{children:"clientId"}),", ",(0,i.jsx)(n.code,{children:"publicKey"}),", and ",(0,i.jsx)(n.code,{children:"token"})," from the ",(0,i.jsx)(n.code,{children:".env"})," file. We are also passing in an array of commands that we want to load.\r\nIn a node.js environment, Carbon provides a utility function ",(0,i.jsx)(n.code,{children:"loadCommands"})," that will load all the commands in a given directory. We are passing in the ",(0,i.jsx)(n.code,{children:"commands"})," directory and the ",(0,i.jsx)(n.code,{children:"__dirname"})," variable, which is the directory of the current file."]}),"\n",(0,i.jsx)(n.h2,{id:"serving-the-client",children:"Serving the Client"}),"\n",(0,i.jsx)(n.p,{children:"Finally, we need to serve the client. We can do this with the following code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"serve(client, { port: 3000 })\n"})}),"\n",(0,i.jsx)(n.p,{children:"This code starts the HTTP client and listens on port 3000. This is the port that Discord will send requests to when a user interacts with your bot."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},5298:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(2155);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);